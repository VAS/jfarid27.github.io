---
layout : post
title  : Markov Chain Monte Carlo using Javascript
snip   : When all else fails... use simulated annealing
---

##What is a random variable?

A random variable can have many different formal definitions, but let's avoid technicalities for the moment and give an intuitive
definition:

A random variable is a variable that can be any one of the values in a given set S. At any time we can "observe" the variable. At that point,
it will **be** some value in the set. Before we observe which value it is, we have a function that when given some value x in S, it will
tell us the probability of seeing x once we reveal the random variable. \*

The non-deterministic nature of random variables makes them widely studied area, and their applications are everywhere. Having an idea of what
may happen in the future given data from today is essential in our daily lives so naturally random variables are a perfect way to model the
future with information today. 

##What is a Markov Chain?

A Markov Chain is a slight extension of a random variable. Again avoiding technicalities, a markov chain is simply a sequence of random variables.
We observe a variable, then observe the next variable in order, one by one. What makes them special is that the probabilities can be 
"updated" depending on the observed value of the previous random variable. 

##Metropolis-Hastings and simulating a Random Variable

Have you ever wondered how exactly random numbers are generated in your favorite language? 
Most have some support for generating samples from a uniform distribution. Javascript specifically has Math.random() 
to help with generating samples that are between 0 and 1, but how do we generate a list of numbers that appear as if
they are sampled from from say, a normal distribution? This is where the Metropolis-Hastings algorithm comes in.

Simply put, if we have a target distribution we want to sample from, and some way to generate samples from a uniform distribution,
the Metropolis-Hastings algorithm gives us a way to generate samples from the target distribution. We'll work with a simple
"coin-flip" distribution, then move onto something harder.

The random variable we define is X, and it can be 0 or 1, both with probabilities 1/2. Now we want to sample values from this
distribution, clearly some  
 
<iframe width="100%" height="300" src="http://jsfiddle.net/jrab227/S6vRY/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>




<iframe width="100%" height="300" src="http://jsfiddle.net/jrab227/3w2Uh/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
